Spiral Matrix

Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 
Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

Solution :

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int r = matrix.size();
        int c = matrix[0].size();
        int top=0, down=r-1, left=0, right=c-1, i=0;
        vector<int>a;
        int dir=0;
        while(top<=down && left<=right){
            
            if(dir==0){
                for(i=left; i<=right; i++){
                    a.push_back(matrix[top][i]);
                }top++;
            }
            else if(dir==1){
                for(i=top; i<=down; i++){
                    a.push_back(matrix[i][right]);
                }right--;
            }
            else if(dir==2){
                for(i=right; i>=left; i--){
                    a.push_back(matrix[down][i]);
                }down--;
            }
            else if(dir==3){
                for(i=down; i>=top; i--){
                    a.push_back(matrix[i][left]);
                }left++;
            }
            dir=(dir+1)%4;
        }
        return a;
    }
};